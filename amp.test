<?php

/**
 * @file
 * Tests for amp.module.
 */

class AmpTestCase extends DrupalWebTestCase {
  protected $admin_user;

  public static function getInfo() {
    return array(
      'name' => 'AMP display modes',
      'description' => 'Tests for the AMP module.',
      'group' => 'AMP',
    );
  }

  protected function setUp() {
    // Enable modules.
    parent::setUp('field_ui', 'amp', 'composer_manager');

    // Create Admin user.
    $this->admin_user = $this->drupalCreateUser(array(
        'access administration pages',
        'administer content types',
        'administer site configuration',
        'administer fields',
        'create article content',
      )
    );
    $this->drupalLogin($this->admin_user);

    // Install the AMP theme.
    theme_enable(array('amptheme', 'ampsubtheme_example'));

    // Enable AMP display on article content.
    $this->drupalGet("admin/structure/types/manage/article/display");
    $this->assertResponse(200);
    $edit = ["view_modes_custom[amp]" => '1'];
    $this->drupalPost(NULL, $edit, t('Save'));
  }

  /**
   * Test the AMP view mode.
   */
  public function testAmpViewMode() {
    global $base_url;

    // Login as an admin user.
    $this->drupalLogin($this->admin_user);

    // Create a node to test AMP metadata.
    $node = $this->drupalCreateNode(array('type' => 'article'));

    // Check the full display.
    $this->drupalGet('node/' . $node->nid);
    $this->assertResponse(200);
    $this->assertText($node->body[LANGUAGE_NONE][0]['value']);
    $this->assertRaw('link rel="amphtml" href="' . $base_url . '/node/1?amp"');

    // Check the AMP display.
    $this->drupalGet('node/' . $node->nid, array('query' => array('amp' => TRUE)));
    $this->assertResponse(200);
    $this->assertText($node->body[LANGUAGE_NONE][0]['value']);
    $this->assertRaw('link rel="canonical" href="' . $base_url . '/node/1"');

    // Configure AMP field formatters.
    $this->drupalGet('admin/structure/types/manage/article/display/amp');
    $this->assertResponse(200);
    $edit = [
      "fields[field_image][type]" => 'amp_image',
      "fields[body][type]" => 'amp_text',
    ];
    $this->drupalPost(NULL, $edit, t('Save'));

    // Check the warnfix messages.
    $this->drupalGet('node/' . $node->nid, array('query' => array('amp' => NULL, 'warnfix' => NULL)));
    $this->assertResponse(200);
    $this->assertRaw('AMP-HTML Validation Issues and Fixes');
    $this->assertRaw('-------------------------------------');
    $this->assertRaw('PASS');
  }
}

class AmpTestUrlFormats extends DrupalWebTestCase {
  protected $admin_user;

  public static function getInfo() {
    return array(
      'name' => 'AMP Url formats',
      'description' => 'Tests AMP pages using prefix /amp and query string ?amp.',
      'group' => 'AMP',
    );
  }

  protected function setUp() {
    // Enable modules.
    parent::setUp('field_ui', 'path', 'amp', 'composer_manager');

    // Create Admin user.
    $this->admin_user = $this->drupalCreateUser(array(
        'create url aliases',
        'access administration pages',
        'administer site configuration',
        'administer content types',
        'administer fields',
        'create article content',
        'edit any article content',
      )
    );
    $this->drupalLogin($this->admin_user);

    // Install the AMP theme.
    theme_enable(array('amptheme', 'ampsubtheme_example'));

    // Enable AMP display on article content.
    $this->drupalGet("admin/structure/types/manage/article/display");
    $this->assertResponse(200);
    $edit = ["view_modes_custom[amp]" => '1'];
    $this->drupalPost(NULL, $edit, t('Save'));
  }

  /**
   * Test the url with query string ?amp.
   */
  public function testAmpUrlFormatQueryString() {
    // Login as an admin user.
    $this->drupalLogin($this->admin_user);

    // Test with query string ?amp
    $this->drupalGet('admin/config/content/amp');
    $this->assertResponse(200);
    $this->assertRaw('Query string i.e. ?amp');
    $edit = ["amp_url_format" => 'query_string'];
    $this->drupalPost(NULL, $edit, t('Save configuration'));

    // Create a node to test the url detection.
    $this->drupalGet('node/add/article');
    $this->assertResponse(200);
    $edit = [
      "title" => 'AMP Page foo test',
      "body[und][0][value]" => 'Foo',
      "path[alias]" => 'foo',
    ];
    $this->drupalPost(NULL, $edit, t('Save'));

    // Check AMP page with path /amp should 404.
    $this->drupalGet('amp/foo');
    $this->assertResponse(404);

    // Check AMP page with query string ?amp.
    $this->drupalGet('foo', array('query' => array('amp' => NULL)));
    $this->assertResponse(200);
    $this->assertRaw('<html amp lang');

    // Check admin UI is not an amp page.
    $this->drupalGet('node/1/edit', array('query' => array('amp' => NULL)));
    $this->assertNoRaw('<html amp lang');
  }

  /**
   * Test the url with prefix /testamp.
   */
  public function testAmpUrlFormatPrefix() {
    // Login as an admin user.
    $this->drupalLogin($this->admin_user);

    // Test with query string /amp
    $this->drupalGet('admin/config/content/amp');
    $this->assertResponse(200);
    $this->assertRaw('Path prefix i.e. /amp');
    $edit = [
      'amp_url_format' => 'prefix',
      'amp_path_prefix' => 'amptest'
    ];
    $this->drupalPost(NULL, $edit, t('Save configuration'));
    menu_cache_clear_all();

    // Create a node to test the url detection.
    $this->drupalGet('node/add/article');
    $this->assertResponse(200);
    $edit = [
      "title" => 'AMP Page foo test',
      "body[und][0][value]" => 'Foo',
      "path[alias]" => 'foo',
    ];
    $this->drupalPost(NULL, $edit, t('Save'));

    // Check AMP page with path /amp should work.
    $this->drupalGet('amptest/foo');
    $this->assertResponse(200);
    $this->assertRaw('<html amp lang');

    // Check AMP page with query string ?amp should show a normal page.
    $this->drupalGet('foo', array('query' => array('amp' => NULL)));
    $this->assertResponse(200);
    $this->assertNoRaw('<html amp lang');

    // This should show a normal page.
    $this->drupalGet('foo');
    $this->assertResponse(200);
    $this->assertNoRaw('<html amp lang');
  }
}
